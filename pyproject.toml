[build-system]
# build the package with [flit](https://flit.readthedocs.io)
requires = ["flit_core >=3.4,<4"]
build-backend = "flit_core.buildapi"

[project]
name = "aiida-uppasd"
dynamic =["version"]
authors= [{name="Qichen Xu", email="qichenx@kth.se"}, {name="Anders Bergman"}, {name="Anna Delin"}, {name="Jonathan Chico}"}]
description = "Plugin for the Uppsala Atomistic Spin Dynamics (UppASD) code for the AiiDA framework"
readme = "README.md"
license = {file = "LICENSE"}
classifiers= [
    "Programming Language :: Python",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Natural Language :: English",
    "Framework :: AiiDA"
]
keywords = ["aiida", "plugin"]
requires-python = ">=3.8"
dependencies = [
    "aiida-core[atomic_tools]~=2.3",
    "plotext"
]

[project.urls]
Home = "https://github.com/UppASD/aiida-uppasd"
Documentation = "https://github.com/UppASD/aiida-uppasd/blob/master/README.md"
Source = "https://github.com/UppASD/aiida-uppasd"

[project.optional-dependencies]
tests = [
    "aiida-core[tests]~=2.3",
    "tox>=3.23.0",
    "virtualenv>20"
]
pre-commit = [
    "tox>=3.23.0",
    "virtualenv>20",
    "pre-commit~=2.2",
    "pylint~=2.15.0",
    "sphinx-lint~=0.6"
]
plotting = [
    "vtk>=7.0",
    "plotly>=5.14.1",
    "matplotlib",
    "scipy"
]
docs = [
    "aiida-core[docs]~=2.3",
    "sphinx-autobuild",
    "sphinx-lint",
    "sphinx-rtd-theme",
    "sphinxcontrib-apidoc",
    "sphinxext.remoteliteralinclude",
    "sphinxcontrib-contentui",
    "sphinxemoji",
]

[project.entry-points."aiida.cmdline.data"]
"uppasd.uppasd_cli" = "aiida_uppasd.tools.core_cli:uppasd_cli"

[project.entry-points."aiida.calculations"]
"uppasd.uppasd_calculation" = "aiida_uppasd.calculations.core_calcs:UppASDCalculation"

[project.entry-points."aiida.parsers"]
"uppasd.uppasd_parser" = "aiida_uppasd.parsers.core_parser:UppASDBaseParser"

[project.entry-points."aiida.workflows"]
"uppasd.base_workflow" = "aiida_uppasd.workflows.base:ASDBaseWorkChain"
"uppasd.task_workflow" = "aiida_uppasd.workflows.base_expose:ASDBaseWorkChain"
"uppasd.simpletask_workflow" = "aiida_uppasd.workflows.simpletask:UppASDSimpleTaskWorkflow"
"uppasd.looptask_workflow" = "aiida_uppasd.workflows.looptask:UppASDLoopTaskWorkflow"
"uppasd.temperature_workflow" = "aiida_uppasd.workflows.looptask:UppASDTemperatureWorkflow"
"uppasd.ferromagnet_workflow" = "aiida_uppasd.workflows.ferromagnet:UppASDFastFerroWorkflow"

[tool.flit.module]
name = "aiida_uppasd"

[tool.pylint.format]
max-line-length = 140

[tool.pylint.messages_control]
disable = [
    "too-many-ancestors",
    "invalid-name",
    "duplicate-code",
    # black compatibility
    "C0330",
    "C0326",
]

[tool.pytest.ini_options]
# Configuration for [pytest](https://docs.pytest.org)
python_files = "test_*.py example_*.py"
filterwarnings = [
    "ignore::DeprecationWarning:aiida:",
    "ignore::DeprecationWarning:plumpy:",
    "ignore::DeprecationWarning:django:",
    "ignore::DeprecationWarning:yaml:",
]

[tool.coverage.run]
# Configuration of [coverage.py](https://coverage.readthedocs.io)
# reporting which lines of your plugin are covered by tests
source=["aiida_uppasd"]


[tool.isort]
# Configuration of [isort](https://isort.readthedocs.io)
line_length = 120
force_sort_within_sections = true
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'AIIDA', 'FIRSTPARTY', 'LOCALFOLDER']
known_aiida = ['aiida']
# this configuration is compatible with yapf
multi_line_output = 3
include_trailing_comma = true

[tool.yapf]
# Configuration of [yapf](https://github.com/google/yapf)
based_on_style = "google"
column_limit = 120
dedent_closing_brackets = true
coalesce_brackets = true
align_closing_bracket_with_visual_indent = true
split_arguments_when_comma_terminated = true
indent_dictionary_value = false

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = pre-commit,{3.8,3.9,3.10,3.11}-aiida_uppasd
requires = virtualenv >= 20
isolated_build = True

[testenv]
setenv = AIIDA_PATH={toxworkdir}/.aiida
allowlist_externals =
                    mkdir
                    rm
commands =
	 mkdir -p {toxworkdir}/.aiida
	 pytest {posargs}
	 rm -r {toxworkdir}/.aiida
extras = tests

[testenv:pre-commit]
allowlist_externals = bash
commands = bash -ec 'pre-commit run --all-files || ( git diff; git status; exit 1; )'
extras =
       pre-commit
       plotting
       tests

[flake8]
max-line-length = 140
import-order-style = edited

[pycodestyle]
max-line-length = 140
"""
